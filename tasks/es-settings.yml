---
<<<<<<< HEAD
- name: "Setting m_lock"
=======
- name: Setting m_lock
>>>>>>> master
  set_fact:
    m_lock_enabled: "{{ es_config['bootstrap.memory_lock'] }}"
  when:
    - es_config['bootstrap.memory_lock'] is defined

<<<<<<< HEAD
- name: "Check default home path"
=======
- name: Check default home path
>>>>>>> master
  stat:
    path: '{{ default["es_home"] }}'
  register: default_home

<<<<<<< HEAD
- name: "Move home path if redefined"
  block:
    - name: "Copy home to new destination"
=======
- name: Move home path if redefined
  block:

    - name: Copy home to new destination
>>>>>>> master
      synchronize:
        src: '{{ default["es_home"] }}/'
        dest: '{{ es_home }}/'
        recursive: True
      delegate_to: '{{ inventory_hostname }}'
<<<<<<< HEAD

    - name: "Remove old destination"
      file:
        path: '{{ default["es_home"] }}'
        state: absent
=======

    - name: Remove old destination
      file:
        path: '{{ default["es_home"] }}'
        state: absent

>>>>>>> master
  become: True
  when:
    - es_home != default['es_home']
    - default_home.stat.exists

- block:

<<<<<<< HEAD
    - name: "Remove default redefined paths"
=======
    - name: Remove default redefined paths
>>>>>>> master
      file:
        path: '{{ default[es_path_item] }}'
        state: absent
      when: lookup('vars', es_path_item) != default[es_path_item]
      loop:
        - es_conf_dir
        - es_log_dir
        - es_pid_dir
        - es_data_dirs
      loop_control:
        loop_var: es_path_item

<<<<<<< HEAD
    - name: "Create paths if absent"
=======
    - name: Create paths if absent
>>>>>>> master
      file:
        path: '{{ default[es_path_item] }}'
        state: directory
        owner: '{{ es_user }}'
        group: '{{ es_group }}'
      loop:
        - es_conf_dir
        - es_log_dir
        - es_pid_dir
      loop_control:
        loop_var: es_path_item

<<<<<<< HEAD
    - name: "Create data paths if absent"
=======
    - name: Create data paths if absent
>>>>>>> master
      file:
        path: '{{ es_datapath_item }}'
        state: directory
        owner: '{{ es_user }}'
        group: '{{ es_group }}'
      loop: '{{ es_data_dirs }}'
      loop_control:
        loop_var: es_datapath_item

<<<<<<< HEAD
    - name: "Copy Configuration Files"
=======
    - name: Copy Configuration Files
>>>>>>> master
      template:
        src: '{{ es_config_item }}.j2'
        dest: '{{ es_conf_dir }}/{{ es_config_item }}'
        owner: '{{ es_user }}'
        group: '{{ es_group }}'
        mode: 0644
        force: True
      notify: Restart elasticsearch
      loop:
        - elasticsearch.yml
        - jvm.options
        - log4j2.properties
      loop_control:
        loop_var: es_config_item

<<<<<<< HEAD
    - name: "Copy Default File for Instance"
=======
    - name: Copy Default File for Instance
>>>>>>> master
      template:
        src: default/elasticsearch.j2
        dest: '{{ es_default_file }}'
        mode: 0644
        force: True
      notify: Restart elasticsearch

    - name: "Copy service configuration file"
      template:
        src: '{{ es_service_script }}.j2'
        dest: '{{ es_service_path }}/{{ es_service_script }}'
        mode: '{{ es_service_script_mode }}'
        force: True
      notify: '{{ es_service_handlers }}'

  become: True
